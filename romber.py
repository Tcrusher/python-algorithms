"""
【问题描述】利用龙贝格积分公式计算函数f(x)=(x^2+x+1)cos(x)，在区间[0, pi/2]范围内的定积分近似值。
【输入形式】在屏幕上龙贝格积分表行的最大值。
【输出形式】龙贝格积分表。
"""
import numpy as np
import math


def fun(x):  # 积分函数
    return (x ** 2 + x + 1) * np.cos(x)


def romber(a, b, n):
    # 利用龙贝格积分与梯形积分、辛普森积分，布尔积分的关系，公式不好注释，所以这里就没写了
    # 根据公式，推出下面的循环
    m = 1
    h = b - a
    j = 0
    r = np.zeros((n+1, n+1), dtype=np.double)  # 声明r矩阵，0行，0列不使用
    r[1, 1] = h * (fun(a) + fun(b)) / 2.0
    while (j < n-1) or (j < 4):  # 按行依次求出r矩阵
        j = j + 1
        h = h / 2.0
        s = 0
        for p in range(1, m+1):
            x = a + h * (2 * p - 1)  # x的变化
            s = s + fun(x)  # s的和
        r[j + 1, 1] = r[j, 1] / 2.0 + h * s  # 列的值
        m = m * 2
        for k in range(1, j+1):  # 根据行的第一个值，求剩下的值
            r[j + 1, k + 1] = r[j + 1, k] + (r[j + 1, k] - r[j, k]) / (4 ** k - 1)
    print(r[1:, 1:5])  # 输出r矩阵，按照要求输出行，列
    """
【样例1输出】
[[0.78539816 0.         0.         0.        ]
 [1.72681266 2.04061749 0.         0.        ]
 [1.96053417 2.03844134 2.03829626 0.        ]
 [2.01879395 2.03821388 2.03819871 2.03819716]
 [2.03334734 2.03819847 2.03819745 2.03819743]
 [2.03698495 2.03819749 2.03819743 2.03819743]]
    """


def main():
    """
【样例1输入】
6
    """
    n = int(input())  # 输入龙贝格积分表行的最大值
    romber(0, math.pi/2, n)  # 调用romber函数，求出r矩阵


if __name__ == '__main__':
    main()
"""
【样例1说明】输入：龙贝格积分表行的最大值n为6。输出：6行4列的龙贝格积分表。
"""
